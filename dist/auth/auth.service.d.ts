import { JwtService } from '@nestjs/jwt';
import { RoleEnum } from 'src/common/enums/role.enum';
import { JwtConfigService } from 'src/config/jwt/config.service';
import { AccountsService } from 'src/models/accounts/accounts.service';
import { AccountEntity } from 'src/models/accounts/entities/account.entity';
import { KitchenService } from 'src/models/kitchens/kitchens.service';
import { ProfileService } from 'src/models/profiles/profile.service';
import { RolesService } from 'src/models/roles/roles.service';
import { ShippersService } from 'src/models/shippers/shippers.service';
import { SharedService } from 'src/shared/shared.service';
import { DataSource } from 'typeorm';
import { CheckPhoneDTO, LoginDto } from './dto/login.dto';
import { RegisterAccountDTO } from './dto/register-account.dto';
import { RegisterCustomerDTO } from './dto/register-customer.dto';
import { RegisterKitchenDTO } from './dto/register-kitchen.dto';
import { RegisterShipperDTO } from './dto/register-shipper.dto';
import { LoginResponseDto } from './response/login-response.dto';
import { RefreshTokenResponseDTO } from './response/refresh-token-response.dto';
export declare class AuthService {
    private readonly dataSource;
    private readonly accountsService;
    private readonly profileService;
    private readonly rolesService;
    private readonly shipperService;
    private readonly jwtService;
    private readonly jwtConfigService;
    private readonly kitchenService;
    private readonly sharedService;
    constructor(dataSource: DataSource, accountsService: AccountsService, profileService: ProfileService, rolesService: RolesService, shipperService: ShippersService, jwtService: JwtService, jwtConfigService: JwtConfigService, kitchenService: KitchenService, sharedService: SharedService);
    signUpCustomer(register: RegisterCustomerDTO): Promise<AccountEntity>;
    registerShipper(register: RegisterShipperDTO): Promise<AccountEntity>;
    registerKitchen(register: RegisterKitchenDTO): Promise<AccountEntity>;
    checkPhoneExist(dto: CheckPhoneDTO): Promise<LoginResponseDto>;
    checkPhoneShipperExist(dto: CheckPhoneDTO): Promise<LoginResponseDto>;
    checkPhoneCustomerExist(dto: CheckPhoneDTO): Promise<LoginResponseDto>;
    loginAll(dto: LoginDto): Promise<LoginResponseDto>;
    login(dto: LoginDto, role: RoleEnum): Promise<LoginResponseDto>;
    refreshToken(refreshToken: string): Promise<RefreshTokenResponseDTO>;
    logout(user: AccountEntity): Promise<string>;
    signUpAdmin(register: RegisterAccountDTO): Promise<AccountEntity>;
    signUpManager(register: RegisterAccountDTO): Promise<AccountEntity>;
}
