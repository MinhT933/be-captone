import { OrderEntity } from './entities/order.entity';
import { DataSource, Repository } from 'typeorm';
import { BaseService } from '../base/base.service';
import { OrderFilterDTO, OrderGetByKitchen, OrderSearchByDate, SessionFilterOrder } from './dto/order-filter.dto';
import { Mapper } from '@automapper/core';
import { OrderCreationDTO } from './dto/create-order.dto';
import { NotificationsService } from '../notifications/notifications.service';
import { FirebaseMessageService } from 'src/providers/firebase/message/firebase-message.service';
import { SubscriptionService } from '../subscriptions/subscriptions.service';
import { PackageItemService } from '../package-item/package-item.service';
import { StationsService } from '../stations/stations.service';
import { KitchenService } from '../kitchens/kitchens.service';
import { TimeSlotsService } from '../time-slots/time-slots.service';
import { OrderDetailRes } from './dto/order-detail-res';
import { SessionService } from '../sessions/sessions.service';
import { BatchService } from '../batchs/batch.service';
import { DeliveryTripService } from '../deliveryTrips/deliveryTrip.service';
export declare class OrdersService extends BaseService<OrderEntity> {
    private readonly ordersRepository;
    private readonly mapper;
    private readonly subscriptionService;
    private readonly packageItemService;
    private readonly stationService;
    private readonly kitchenService;
    private readonly timeSlotService;
    private readonly dataSource;
    private readonly notificationsService;
    private readonly firebaseMessageService;
    private readonly batchService;
    private readonly tripService;
    private readonly sessionService;
    private readonly logger;
    constructor(ordersRepository: Repository<OrderEntity>, mapper: Mapper, subscriptionService: SubscriptionService, packageItemService: PackageItemService, stationService: StationsService, kitchenService: KitchenService, timeSlotService: TimeSlotsService, dataSource: DataSource, notificationsService: NotificationsService, firebaseMessageService: FirebaseMessageService, batchService: BatchService, tripService: DeliveryTripService, sessionService: SessionService);
    createOrders(dto: OrderCreationDTO): Promise<string>;
    deleteSubOrder(orders: OrderEntity[]): Promise<boolean>;
    getOrderBySession(filter: SessionFilterOrder): Promise<OrderEntity[]>;
    confirmSubOrder(orders: OrderEntity[]): Promise<boolean>;
    getOrderDetail(id: string): Promise<OrderDetailRes>;
    findById(id: string): Promise<OrderEntity>;
    getOrderByKitchen(find: OrderGetByKitchen): Promise<OrderEntity[]>;
    getOrderByStatus(orderFilter: OrderFilterDTO): Promise<OrderEntity[]>;
    getOrderByStatusDate(deliveryDate: OrderSearchByDate, orderFilter: OrderFilterDTO): Promise<OrderEntity[]>;
}
