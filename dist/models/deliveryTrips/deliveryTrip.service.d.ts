import { DataSource, Repository } from 'typeorm';
import { BaseService } from '../base/base.service';
import { DeliveryTripEntity } from './entities/deliveryTrip.entity';
import { AccountEntity } from '../accounts/entities/account.entity';
import { ShippersService } from '../shippers/shippers.service';
import { OrdersService } from '../orders/order.service';
import { StationsService } from '../stations/stations.service';
import { KitchenService } from '../kitchens/kitchens.service';
import { DirectShipperDTO, UpdateStatusTrip } from './dto/updateStatusTrip.dto';
import { TimeSlotsService } from '../time-slots/time-slots.service';
import { TripFilter, TripFilterBySession, TripFilterDate } from './dto/deliveryTrip-filter.dto';
import { NotificationsService } from '../notifications/notifications.service';
import { AssignShipperDTO, CreateTripDTO } from './dto/createDeliveryTrip.dto';
import { SessionService } from '../sessions/sessions.service';
import { BatchService } from '../batchs/batch.service';
export declare class DeliveryTripService extends BaseService<DeliveryTripEntity> {
    private readonly dataSource;
    private readonly deliveryTripRepository;
    private readonly shipperService;
    private readonly orderService;
    private readonly kitchenService;
    private readonly timeSlotService;
    private readonly stationService;
    private readonly notificationsService;
    private readonly sessionService;
    private readonly batchService;
    constructor(dataSource: DataSource, deliveryTripRepository: Repository<DeliveryTripEntity>, shipperService: ShippersService, orderService: OrdersService, kitchenService: KitchenService, timeSlotService: TimeSlotsService, stationService: StationsService, notificationsService: NotificationsService, sessionService: SessionService, batchService: BatchService);
    getAllDeliveryTrip(filter: TripFilter): Promise<DeliveryTripEntity[]>;
    getDeliveryTripBySession(filter: TripFilterBySession): Promise<DeliveryTripEntity[]>;
    getDeliveryTripByStatus(user: AccountEntity, filter: TripFilter): Promise<DeliveryTripEntity[]>;
    getDeliveryTripByDeliveryDate(user: AccountEntity, filter: TripFilterDate): Promise<DeliveryTripEntity[]>;
    getDeliveryTripByShipper(user: AccountEntity): Promise<DeliveryTripEntity[]>;
    listTripBySession(sessionId: string): Promise<DeliveryTripEntity[]>;
    createTrip(dto: CreateTripDTO): Promise<DeliveryTripEntity[]>;
    assignShipperToTrip(dto: AssignShipperDTO): Promise<DeliveryTripEntity[]>;
    getTripById(tripId: string): Promise<DeliveryTripEntity>;
    updateStatusTrip(orderIds: UpdateStatusTrip): Promise<DeliveryTripEntity>;
    rejectByShipper(id: string, user: AccountEntity): Promise<string>;
    directShipperByManager(transfer: DirectShipperDTO): Promise<string>;
}
